using UnityEngine;

public class HullBreachSwitch : MonoBehaviour
{
    public GameObject hullBreach_1;
    public GameObject hullBreach_2;

    private bool isSwitched = false;
    private float timeSinceSpawn;

    private static int totalFixed = 0;
    private static bool gameEnded = false;

    void Start()
    {
        if (hullBreach_1 == null || hullBreach_2 == null)
        {
            Debug.LogError("–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã hullBreach_1 –∏–ª–∏ hullBreach_2!");
            return;
        }

        hullBreach_1.SetActive(true);
        hullBreach_2.SetActive(false);
        timeSinceSpawn = Time.time;
    }

    void Update()
    {
        if (!isSwitched && !gameEnded)
        {
            if (Time.time - timeSinceSpawn >= 5f)
            {
                Debug.Log("–ü–†–û–ò–ì–†–´–® ‚Äî –ø—Ä–æ—Ç–µ—á–∫–∞ –Ω–µ –±—ã–ª–∞ –ø–æ—á–∏–Ω–µ–Ω–∞ –∑–∞ 5 —Å–µ–∫—É–Ω–¥.");
                LoseGame();
            }
        }
    }

    private void OnTriggerEnter2D(Collider2D other)
    {
        if (!isSwitched && other.CompareTag("Player") && !gameEnded)
        {
            hullBreach_1.SetActive(false);
            hullBreach_2.SetActive(true);
            isSwitched = true;
            totalFixed++;

            Debug.Log($"–ü–æ—á–∏–Ω–µ–Ω–æ –ø—Ä–æ—Ç–µ—á–µ–∫: {totalFixed}");

            if (totalFixed >= 10)
            {
                Debug.Log("–ü–û–ë–ï–î–ê ‚Äî –≤—Å–µ 10 –ø—Ä–æ—Ç–µ—á–µ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–¥–µ–ª–∞–Ω—ã!");
                gameEnded = true;
                RandomSpawner.gameFinished = true;

                // ‚¨ÖÔ∏è –°–±—Ä–æ—Å–∏–º –≤—Å—ë, —á—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø–æ—Ä—Ç–∞–ª
                PortalTrigger portal = FindObjectOfType<PortalTrigger>();
                if (portal != null)
                {
                    portal.ResetPortalState();
                }
            }

        }
    }

    private void LoseGame()
    {
        gameEnded = true;
        totalFixed = 0;
        RandomSpawner.gameFinished = true;

        HullBreachSwitch[] allBreaches = FindObjectsOfType<HullBreachSwitch>();
        foreach (var breach in allBreaches)
        {
            Destroy(breach.gameObject);
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ—Å—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ –∂–∏–≤–æ–π –æ–±—ä–µ–∫—Ç
        RandomSpawner spawner = FindObjectOfType<RandomSpawner>();
        if (spawner != null)
        {
            spawner.Invoke(nameof(spawner.RestartGame), 3f);
        }
    }


    private void RestartGame()
    {
        Debug.Log("üîÑ –ò–≥—Ä–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞");
        gameEnded = false;
        RandomSpawner.gameFinished = false;

        // –ò—â–µ–º –æ–±—ä–µ–∫—Ç —Å–æ —Å–ø–∞–≤–Ω–µ—Ä–æ–º –∏ –≤—ã–∑—ã–≤–∞–µ–º –µ–≥–æ —Ä–µ—Å—Ç–∞—Ä—Ç
        RandomSpawner spawner = FindObjectOfType<RandomSpawner>();
        if (spawner != null)
        {
            spawner.CancelInvoke();
            spawner.InvokeRepeating("SpawnBreach", 0f, spawner.spawnInterval);
        }
    }
    public static void ResetGameState()
    {
        totalFixed = 0;
        gameEnded = false;
    }

}
